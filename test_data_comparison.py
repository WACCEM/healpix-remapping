#!/usr/bin/env python3
"""
Test script to compare the actual data files generated by notebook vs Python script
"""

import numpy as np
import xarray as xr
import easygems.healpix as egh

def compare_datasets():
    """Compare datasets generated by notebook vs script"""
    
    # File paths
    notebook_file = "/pscratch/sd/w/wcmca1/GPM/IR_IMERG_Combined_V06B/healpix_test/merg_2019010100_4km-pixel_healpix_z9.nc"
    script_file = "test_script_output.nc"
    
    print("Comparing datasets...")
    print(f"Notebook file: {notebook_file}")
    print(f"Script file: {script_file}")
    
    # Load both datasets
    try:
        ds_notebook = xr.open_dataset(notebook_file)
        print(f"\nNotebook dataset loaded successfully")
        print(f"  Shape: {dict(ds_notebook.sizes)}")
        print(f"  Variables: {list(ds_notebook.data_vars)}")
        print(f"  Coordinates: {list(ds_notebook.coords)}")
        
        # Check CRS coordinate
        if 'crs' in ds_notebook.coords:
            print(f"  CRS attrs: {ds_notebook.crs.attrs}")
    except FileNotFoundError:
        print(f"\nNotebook file not found: {notebook_file}")
        return
    except Exception as e:
        print(f"\nError loading notebook file: {e}")
        return
    
    try:
        ds_script = xr.open_dataset(script_file)
        print(f"\nScript dataset loaded successfully")
        print(f"  Shape: {dict(ds_script.sizes)}")
        print(f"  Variables: {list(ds_script.data_vars)}")
        print(f"  Coordinates: {list(ds_script.coords)}")
        
        # Check CRS coordinate
        if 'crs' in ds_script.coords:
            print(f"  CRS attrs: {ds_script.crs.attrs}")
    except FileNotFoundError:
        print(f"\nScript file not found: {script_file}")
        return
    except Exception as e:
        print(f"\nError loading script file: {e}")
        return
    
    # Compare data values
    print(f"\nComparing data values...")
    
    for var_name in ds_notebook.data_vars:
        if var_name in ds_script.data_vars:
            nb_data = ds_notebook[var_name].isel(time=0)
            sc_data = ds_script[var_name].isel(time=0)
            
            if np.array_equal(nb_data.values, sc_data.values, equal_nan=True):
                print(f"  ✓ {var_name}: Data values are IDENTICAL")
            else:
                print(f"  ✗ {var_name}: Data values DIFFER")
                
                # Calculate statistics
                diff = np.abs(nb_data.values - sc_data.values)
                valid_diff = diff[~np.isnan(diff)]
                
                if len(valid_diff) > 0:
                    print(f"    Max difference: {np.max(valid_diff)}")
                    print(f"    Mean difference: {np.mean(valid_diff)}")
                    print(f"    Non-zero differences: {np.sum(valid_diff > 0)} / {len(valid_diff)}")
                
                # Check for any systematic differences
                nb_stats = f"mean={np.nanmean(nb_data.values):.6f}, std={np.nanstd(nb_data.values):.6f}"
                sc_stats = f"mean={np.nanmean(sc_data.values):.6f}, std={np.nanstd(sc_data.values):.6f}"
                print(f"    Notebook: {nb_stats}")
                print(f"    Script:   {sc_stats}")
        else:
            print(f"  - {var_name}: Only in notebook dataset")
    
    for var_name in ds_script.data_vars:
        if var_name not in ds_notebook.data_vars:
            print(f"  - {var_name}: Only in script dataset")
    
    # Test visualization after attach_coords
    print(f"\nTesting visualization after attach_coords...")
    
    try:
        ds_nb_with_coords = ds_notebook.pipe(egh.attach_coords)
        print(f"  ✓ Notebook: egh.attach_coords successful")
        print(f"    Coordinates after: {list(ds_nb_with_coords.coords)}")
    except Exception as e:
        print(f"  ✗ Notebook: egh.attach_coords failed: {e}")
    
    try:
        ds_sc_with_coords = ds_script.pipe(egh.attach_coords)
        print(f"  ✓ Script: egh.attach_coords successful")
        print(f"    Coordinates after: {list(ds_sc_with_coords.coords)}")
    except Exception as e:
        print(f"  ✗ Script: egh.attach_coords failed: {e}")

if __name__ == "__main__":
    compare_datasets()
